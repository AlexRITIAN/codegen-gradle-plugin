/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.10.1/userguide/custom_plugins.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    signing
    id("com.gradle.plugin-publish") version "1.3.0"
}

group = "io.github.alexritian"
version = "1.0.0"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven { url = uri("https://plugins.gradle.org/m2/") } // Gradle Plugin Portal
}

dependencies {

    implementation("nu.studer:gradle-jooq-plugin:9.0")
    implementation("org.testcontainers:postgresql:1.20.1")
    // flyway
    implementation("org.flywaydb:flyway-core:10.19.0")
    implementation("org.flywaydb:flyway-database-postgresql:10.19.0")
    implementation("org.postgresql:postgresql:42.7.4")
    // 测试依赖
    testImplementation(gradleTestKit())
    testImplementation("org.junit.jupiter:junit-jupiter:5.11.0")
}

gradlePlugin {
    website = "https://github.com/AlexRITIAN/codegen-gradle-plugin"
    vcsUrl = "https://github.com/AlexRITIAN/codegen-gradle-plugin.git"
    // Define the plugin
    val codegenGradlePlugin by plugins.creating {
        id = "io.github.alexritian.codegenGradlePlugin"
        implementationClass = "io.github.alexritian.codegen.CodegenGradlePlugin"
        displayName = "Codegen JOOQ Gradle Plugin"
        description = "A custom Gradle plugin that extends gradle-jooq-plugin with default configurations."
        tags = listOf("jooq", "codegen")
    }
}

tasks.test {
    useJUnitPlatform()
}

sourceSets {
    test {
        java {
            setSrcDirs(listOf("src/test/java"))
        }
    }
}
